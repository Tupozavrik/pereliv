import torch
import cv2
import pyautogui
import numpy as np
import time
import keyboard
import threading

pyautogui.FAILSAFE = False  # –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤–∞—Ä–∏–π–∫—É
# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = torch.hub.load('ultralytics/yolov5', 'custom', path='D:/FP/yolov5/runs/train/dota_yolo960_finetune_final3/weights/best.pt')
model.conf = 0.5

screen_w, screen_h = pyautogui.size()
paused = False
last_attack_time = 0
last_crip_time = 0
last_button_check = 0
check_interval = 10  # –ü—Ä–æ–≤–µ—Ä–∫–∞ igrat/prinat –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

# === –ø–∞—É–∑–∞ ===
def toggle_pause():
    global paused
    paused = not paused
    print("–ü–∞—É–∑–∞ –≤–∫–ª—é—á–µ–Ω–∞" if paused else "–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")

def monitor_hotkey():
    while True:
        keyboard.wait('ctrl+shift+q')
        toggle_pause()
        time.sleep(0.5)

def screenshot_rgb():
    # PyAutoGUI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    screenshot = pyautogui.screenshot()
    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy –º–∞—Å—Å–∏–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    return np.array(screenshot)

def click_on_box(results, label_name):
    df = results.pandas().xyxy[0]
    matches = df[df['name'] == label_name]
    
    for _, row in matches.iterrows():
        if row['confidence'] < 0.5:
            continue
        x_center = int((row['xmin'] + row['xmax']) / 2)
        y_center = int((row['ymin'] + row['ymax']) / 2)
        print(f"üîò –ö–ª–∏–∫ –ø–æ {label_name} –≤ —Ç–æ—á–∫—É ({x_center}, {y_center})")
        pyautogui.moveTo(x_center, y_center, duration=0.2)
        pyautogui.click()
        return True
    return False

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
threading.Thread(target=monitor_hotkey, daemon=True).start()

# –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
cv2.namedWindow("–û—Ç–ª–∞–¥–∫–∞ YOLO", cv2.WINDOW_NORMAL)

while True:
    if paused:
        time.sleep(0.1)
        continue

    now = time.time()
    # –ü–æ–ª—É—á–∞–µ–º RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    frame = screenshot_rgb()
    # YOLOv5 –æ–∂–∏–¥–∞–µ—Ç RGB, —Ç–∞–∫ —á—Ç–æ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    results = model(frame)

    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ç–∞–∫–∂–µ –≤ RGB)
    annotated_frame = results.render()[0]  
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BGR –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenCV
    annotated_bgr = cv2.cvtColor(annotated_frame, cv2.COLOR_RGB2BGR)
    cv2.imshow("–û—Ç–ª–∞–¥–∫–∞ YOLO", annotated_bgr)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ igrat / prinat –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ ===
    if now - last_button_check >= check_interval:
        print("üïµÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ igrat / prinat")
        found = False
        found |= click_on_box(results, 'igrat')
        found |= click_on_box(results, 'prinat')
        if not found:
            print("‚ùå –ö–Ω–æ–ø–∫–∏ igrat / prinat –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        last_button_check = now

    # === –¥–µ—Ç–µ–∫—Ç –∫—Ä–∏–ø–æ–≤ ===
    found_crips = False
    for *xyxy, conf, cls in results.xyxy[0]:
        label = model.names[int(cls)]
        if label == 'crips' and conf > 0.5:
            found_crips = True
            break

    if found_crips:
        last_crip_time = time.time()
        print("–ö—Ä–∏–ø—ã –Ω–∞–π–¥–µ–Ω—ã! –ê—Ç–∞–∫—É–µ–º.")
        for *xyxy, conf, cls in results.xyxy[0]:
            label = model.names[int(cls)]
            if label == 'crips' and conf > 0.5 and time.time() - last_attack_time >= 1:
                x1, y1, x2, y2 = map(int, xyxy)
                cx = (x1 + x2) // 2
                cy = (y1 + y2) // 2
                pyautogui.moveTo(cx, cy)
                pyautogui.click(button='right')
                last_attack_time = time.time()
        time.sleep(0.5)
        continue

    print("–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
    time.sleep(1)

cv2.destroyAllWindows()
